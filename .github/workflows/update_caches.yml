name: Update Caches

on:
  push:
    branches: [ main ]

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  UpdateCaches:
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: 1.7.1
      POETRY_EXPORT_VERSION: 1.6.0
      POETRY_HOME: /home/runner/.local/bin/
      POETRY: /home/runner/.local/bin/bin/poetry
      PROJECT_NAME: inews
    steps:
      ###############################################
      # Checkout
      ###############################################
      - name: Git clone the repository
        uses: actions/checkout@v4

      ###############################################
      # Cache Poetry & Requirements
      ###############################################
      - name: Cache requirements
        id: req-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/requirements.txt
          key: requirements-${{ hashFiles('poetry.lock') }}

      - name: Cache Poetry installation
        id: poetry-cache
        if: steps.req-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: poetry-${{ env.POETRY_VERSION }}-${{ env.POETRY_EXPORT_VERSION }}

      - name: Install Poetry
        if: |
          steps.req-cache.outputs.cache-hit != 'true' &&
          steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry==$POETRY_VERSION
          $POETRY self add poetry-plugin-export==$POETRY_EXPORT_VERSION

      - name: Export requirements.txt
        if: steps.req-cache.outputs.cache-hit != 'true'
        run: |
          $POETRY config warnings.export false
          $POETRY export -f requirements.txt --output requirements.txt --without-hashes


      ###############################################
      # Cache Image Build
      ###############################################
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.PROJECT_NAME }}

      - name: Build and cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64
          cache-from: type=gha,scope=global
          cache-to: type=gha,mode=max,scope=global
